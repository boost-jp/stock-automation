name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24.4'


jobs:
  # Code Quality and Security
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      working-directory: ./backend
      run: go mod download
      
    - name: Install development tools
      working-directory: ./backend
      run: make install-tools
      
    - name: Run go fmt
      working-directory: ./backend
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted correctly:"
          gofmt -s -l .
          exit 1
        fi
        
    - name: Run go vet
      working-directory: ./backend
      run: go vet ./...
      
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: ./backend
        args: --timeout=5m
        
    # gosec security scanner temporarily disabled due to installation issues
    # - name: Run gosec security scanner
    #   working-directory: ./backend
    #   run: |
    #     go install github.com/securecodewarrior/gosec/v2/cmd/gosec@v2.18.2
    #     gosec -fmt json -out gosec-report.json ./... || true

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      working-directory: ./backend
      run: go mod download
      
    - name: Run unit tests
      working-directory: ./backend
      run: go test -v -race -coverprofile=coverage.out ./...
      
    - name: Generate coverage report
      working-directory: ./backend
      run: go tool cover -html=coverage.out -o coverage.html
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      mysql:
        image: mysql:8.4
        env:
          MYSQL_ROOT_PASSWORD: testpass
          MYSQL_DATABASE: stock_automation_test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      working-directory: ./backend
      run: go mod download
      
    - name: Wait for MySQL
      run: |
        timeout 60 bash -c 'until mysql -h 127.0.0.1 -u testuser -ptestpass -e "SELECT 1"; do sleep 1; done'
        
    - name: Run integration tests
      working-directory: ./backend
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_NAME: stock_automation_test
        DB_USER: testuser
        DB_PASSWORD: testpass
      run: go test -v -tags=integration ./...

  # Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      working-directory: ./backend
      run: go mod download
      
    - name: Build application
      working-directory: ./backend
      run: |
        go build -o stock-automation cmd/main.go
        go build -ldflags="-s -w" -o stock-automation-optimized cmd/main.go
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          backend/stock-automation
          backend/stock-automation-optimized


