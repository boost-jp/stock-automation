name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24.4'

jobs:
  # Code Quality and Security
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      working-directory: ./backend
      run: go mod download
      
    - name: Run go fmt
      working-directory: ./backend
      run: |
        if [ "$(gofmt -s -l . | grep -E '\.(go)$' | wc -l)" -gt 0 ]; then
          echo "Code is not formatted correctly:"
          gofmt -s -l . | grep -E '\.(go)$'
          exit 1
        fi
        
    # - name: Run go vet
    #   working-directory: ./backend
    #   run: go vet ./...
      
    # TODO: Re-enable golangci-lint after fixing code quality issues
    # - name: Run golangci-lint
    #   uses: golangci/golangci-lint-action@v3
    #   with:
    #     version: latest
    #     working-directory: ./backend
    #     args: --timeout=5m

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: stock_automation_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      working-directory: ./backend
      run: go mod download

      
    - name: Setup test database
      working-directory: ./backend
      env:
        DB_HOST: localhost
        DB_PORT: 3306
        DB_USER: root
        DB_PASS: password
        TEST_DB_NAME: stock_automation_test
      run: |
        mysql -h$DB_HOST -P$DB_PORT -u$DB_USER -p$DB_PASS -e "CREATE DATABASE IF NOT EXISTS $TEST_DB_NAME CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
        go tool mysqldef -h$DB_HOST -P$DB_PORT -u$DB_USER -p$DB_PASS $TEST_DB_NAME < schema.sql
      
    - name: Run unit tests
      working-directory: ./backend
      env:
        TEST_DB_HOST: localhost
        TEST_DB_USER: root
        TEST_DB_PASSWORD: password
      run: go test -v -race -coverprofile=coverage.out ./...
      
    - name: Generate coverage report
      working-directory: ./backend
      run: go tool cover -html=coverage.out -o coverage.html

  # Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      working-directory: ./backend
      run: go mod download
      
    - name: Build application
      working-directory: ./backend
      run: |
        go build -o stock-automation cmd/main.go
        go build -ldflags="-s -w" -o stock-automation-optimized cmd/main.go
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          backend/stock-automation
          backend/stock-automation-optimized