// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"fmt"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/types"
)

//go:generate go run  ../../../cmd/generator/repoinit --fields=ID,Code,Name,Shares,PurchasePrice,PurchaseDate,CreatedAt,UpdatedAt, Portfolio

// You can edit this as you like.

// Portfolio is an object representing the database table.
// Set the "validate" tags as needed.
// https://pkg.go.dev/gopkg.in/go-playground/validator.v10
type Portfolio struct {
	ID            string
	Code          string        // 銘柄コード
	Name          string        // 銘柄名
	Shares        int           // 保有株数
	PurchasePrice types.Decimal // 購入価格
	PurchaseDate  time.Time     // 購入日
	CreatedAt     null.Time     // 作成日時
	UpdatedAt     null.Time     // 更新日時
}

// CalculateCurrentValue calculates the current value of this portfolio holding
func (p *Portfolio) CalculateCurrentValue(currentPrice float64) float64 {
	return float64(p.Shares) * currentPrice
}

// CalculatePurchaseCost calculates the total purchase cost
func (p *Portfolio) CalculatePurchaseCost() float64 {
	purchasePrice := p.getPurchasePrice()
	return float64(p.Shares) * purchasePrice
}

// CalculateGain calculates profit/loss for this holding
func (p *Portfolio) CalculateGain(currentPrice float64) float64 {
	return p.CalculateCurrentValue(currentPrice) - p.CalculatePurchaseCost()
}

// CalculateGainPercent calculates profit/loss percentage
func (p *Portfolio) CalculateGainPercent(currentPrice float64) float64 {
	purchaseCost := p.CalculatePurchaseCost()
	if purchaseCost == 0 {
		return 0
	}
	gain := p.CalculateGain(currentPrice)
	return (gain / purchaseCost) * 100
}

// Validate validates portfolio data
func (p *Portfolio) Validate() error {
	if p.Code == "" {
		return fmt.Errorf("銘柄コードは必須です")
	}
	if p.Name == "" {
		return fmt.Errorf("銘柄名は必須です")
	}
	if p.Shares <= 0 {
		return fmt.Errorf("保有株数は1以上である必要があります")
	}
	if p.getPurchasePrice() <= 0 {
		return fmt.Errorf("購入価格は0より大きい必要があります")
	}
	return nil
}

// GetPurchasePrice is a helper to extract float64 from types.Decimal
func (p *Portfolio) GetPurchasePrice() float64 {
	if p.PurchasePrice.Big == nil {
		return 0.0
	}
	f, _ := p.PurchasePrice.Big.Float64()
	return f
}

// GetTestPrice is a helper to get test price from external map
var GetTestPrice = func(code string) (float64, bool) {
	// This will be overridden by tests
	return 0, false
}

// getPurchasePrice is a private helper
func (p *Portfolio) getPurchasePrice() float64 {
	return p.GetPurchasePrice()
}

func NewPortfolio(
	ID string,
	Code string,
	Name string,
	Shares int,
	PurchasePrice types.Decimal,
	PurchaseDate time.Time,
	CreatedAt null.Time,
	UpdatedAt null.Time,
) *Portfolio {
	do := &Portfolio{
		ID:            ID,
		Code:          Code,
		Name:          Name,
		Shares:        Shares,
		PurchasePrice: PurchasePrice,
		PurchaseDate:  PurchaseDate,
		CreatedAt:     CreatedAt,
		UpdatedAt:     UpdatedAt,
	}
	return do
}
