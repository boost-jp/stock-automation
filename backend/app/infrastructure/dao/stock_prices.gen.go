// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dao

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	cerrors "github.com/boost-jp/stock-automation/app/errors"
	errors "github.com/boost-jp/stock-automation/app/errors/boilerrors"
	"github.com/go-sql-driver/mysql"
)

// InsertAll inserts all rows with the specified column values, using an executor.
func (o StockPriceSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}
	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())

			if queries.MustTime(row.CreatedAt).IsZero() {
				queries.SetScanner(&row.CreatedAt, currTime)
			}
			if queries.MustTime(row.UpdatedAt).IsZero() {
				queries.SetScanner(&row.UpdatedAt, currTime)
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return err
		}

		nzDefaults := queries.NonZeroDefaultSet(stockPriceColumnsWithDefault, row)
		wl, _ := columns.InsertColumnSet(
			stockPriceAllColumns,
			stockPriceColumnsWithDefault,
			stockPriceColumnsWithoutDefault,
			nzDefaults,
		)
		if i == 0 {
			sql = "INSERT INTO `stock_prices` " + "(`" + strings.Join(wl, "`,`") + "`)" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(stockPriceType, stockPriceMapping, wl)
		if err != nil {
			return err
		}
		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, vals...)
	}

	_, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		var mysqlErr *mysql.MySQLError
		if errors.As(err, &mysqlErr) && mysqlErr.Number == 1062 {
			return cerrors.Wrap(cerrors.ErrAlreadyExists, "dao: unable to insert into stock_prices")
		}
		return errors.Wrap(err, "dao: unable to insert into stock_prices")
	}

	return nil
}

func (StockPrice) GetColumns() []string {
	return stockPriceAllColumns
}

func (StockPrice) GetPKs() []string {
	return stockPricePrimaryKeyColumns
}

func (stockPriceQuery) GetColumns() []string {
	return stockPriceAllColumns
}

func (stockPriceQuery) GetPKs() []string {
	return stockPricePrimaryKeyColumns
} // StockPrice is an object representing the database table.
type StockPrice struct {
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`
	// 銘柄コード
	Code string `boil:"code" json:"code" toml:"code" yaml:"code"`
	// 取引日
	Date time.Time `boil:"date" json:"date" toml:"date" yaml:"date"`
	// 始値
	OpenPrice types.Decimal `boil:"open_price" json:"open_price" toml:"open_price" yaml:"open_price"`
	// 高値
	HighPrice types.Decimal `boil:"high_price" json:"high_price" toml:"high_price" yaml:"high_price"`
	// 安値
	LowPrice types.Decimal `boil:"low_price" json:"low_price" toml:"low_price" yaml:"low_price"`
	// 終値
	ClosePrice types.Decimal `boil:"close_price" json:"close_price" toml:"close_price" yaml:"close_price"`
	// 出来高
	Volume int64 `boil:"volume" json:"volume" toml:"volume" yaml:"volume"`
	// 作成日時
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	// 更新日時
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *stockPriceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L stockPriceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StockPriceColumns = struct {
	ID         string
	Code       string
	Date       string
	OpenPrice  string
	HighPrice  string
	LowPrice   string
	ClosePrice string
	Volume     string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	Code:       "code",
	Date:       "date",
	OpenPrice:  "open_price",
	HighPrice:  "high_price",
	LowPrice:   "low_price",
	ClosePrice: "close_price",
	Volume:     "volume",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var StockPriceTableColumns = struct {
	ID         string
	Code       string
	Date       string
	OpenPrice  string
	HighPrice  string
	LowPrice   string
	ClosePrice string
	Volume     string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "stock_prices.id",
	Code:       "stock_prices.code",
	Date:       "stock_prices.date",
	OpenPrice:  "stock_prices.open_price",
	HighPrice:  "stock_prices.high_price",
	LowPrice:   "stock_prices.low_price",
	ClosePrice: "stock_prices.close_price",
	Volume:     "stock_prices.volume",
	CreatedAt:  "stock_prices.created_at",
	UpdatedAt:  "stock_prices.updated_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var StockPriceWhere = struct {
	ID         whereHelperstring
	Code       whereHelperstring
	Date       whereHelpertime_Time
	OpenPrice  whereHelpertypes_Decimal
	HighPrice  whereHelpertypes_Decimal
	LowPrice   whereHelpertypes_Decimal
	ClosePrice whereHelpertypes_Decimal
	Volume     whereHelperint64
	CreatedAt  whereHelpernull_Time
	UpdatedAt  whereHelpernull_Time
}{
	ID:         whereHelperstring{field: "`stock_prices`.`id`"},
	Code:       whereHelperstring{field: "`stock_prices`.`code`"},
	Date:       whereHelpertime_Time{field: "`stock_prices`.`date`"},
	OpenPrice:  whereHelpertypes_Decimal{field: "`stock_prices`.`open_price`"},
	HighPrice:  whereHelpertypes_Decimal{field: "`stock_prices`.`high_price`"},
	LowPrice:   whereHelpertypes_Decimal{field: "`stock_prices`.`low_price`"},
	ClosePrice: whereHelpertypes_Decimal{field: "`stock_prices`.`close_price`"},
	Volume:     whereHelperint64{field: "`stock_prices`.`volume`"},
	CreatedAt:  whereHelpernull_Time{field: "`stock_prices`.`created_at`"},
	UpdatedAt:  whereHelpernull_Time{field: "`stock_prices`.`updated_at`"},
}

// StockPriceRels is where relationship names are stored.
var StockPriceRels = struct {
}{}

// stockPriceR is where relationships are stored.
type stockPriceR struct {
}

// NewStruct creates a new relationship struct
func (*stockPriceR) NewStruct() *stockPriceR {
	return &stockPriceR{}
}

// stockPriceL is where Load methods for each relationship are stored.
type stockPriceL struct{}

var (
	stockPriceAllColumns            = []string{"id", "code", "date", "open_price", "high_price", "low_price", "close_price", "volume", "created_at", "updated_at"}
	stockPriceColumnsWithoutDefault = []string{"id", "code", "date", "open_price", "high_price", "low_price", "close_price", "volume"}
	stockPriceColumnsWithDefault    = []string{"created_at", "updated_at"}
	stockPricePrimaryKeyColumns     = []string{"id"}
	stockPriceGeneratedColumns      = []string{}
)

type (
	// StockPriceSlice is an alias for a slice of pointers to StockPrice.
	// This should almost always be used instead of []StockPrice.
	StockPriceSlice []*StockPrice
	// StockPriceHook is the signature for custom StockPrice hook methods
	StockPriceHook func(context.Context, boil.ContextExecutor, *StockPrice) error

	stockPriceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stockPriceType                 = reflect.TypeOf(&StockPrice{})
	stockPriceMapping              = queries.MakeStructMapping(stockPriceType)
	stockPricePrimaryKeyMapping, _ = queries.BindMapping(stockPriceType, stockPriceMapping, stockPricePrimaryKeyColumns)
	stockPriceInsertCacheMut       sync.RWMutex
	stockPriceInsertCache          = make(map[string]insertCache)
	stockPriceUpdateCacheMut       sync.RWMutex
	stockPriceUpdateCache          = make(map[string]updateCache)
	stockPriceUpsertCacheMut       sync.RWMutex
	stockPriceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var stockPriceAfterSelectHooks []StockPriceHook

var stockPriceBeforeInsertHooks []StockPriceHook
var stockPriceAfterInsertHooks []StockPriceHook

var stockPriceBeforeUpdateHooks []StockPriceHook
var stockPriceAfterUpdateHooks []StockPriceHook

var stockPriceBeforeDeleteHooks []StockPriceHook
var stockPriceAfterDeleteHooks []StockPriceHook

var stockPriceBeforeUpsertHooks []StockPriceHook
var stockPriceAfterUpsertHooks []StockPriceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StockPrice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockPriceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StockPrice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockPriceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StockPrice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockPriceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StockPrice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockPriceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StockPrice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockPriceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StockPrice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockPriceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StockPrice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockPriceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StockPrice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockPriceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StockPrice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockPriceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStockPriceHook registers your hook function for all future operations.
func AddStockPriceHook(hookPoint boil.HookPoint, stockPriceHook StockPriceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		stockPriceAfterSelectHooks = append(stockPriceAfterSelectHooks, stockPriceHook)
	case boil.BeforeInsertHook:
		stockPriceBeforeInsertHooks = append(stockPriceBeforeInsertHooks, stockPriceHook)
	case boil.AfterInsertHook:
		stockPriceAfterInsertHooks = append(stockPriceAfterInsertHooks, stockPriceHook)
	case boil.BeforeUpdateHook:
		stockPriceBeforeUpdateHooks = append(stockPriceBeforeUpdateHooks, stockPriceHook)
	case boil.AfterUpdateHook:
		stockPriceAfterUpdateHooks = append(stockPriceAfterUpdateHooks, stockPriceHook)
	case boil.BeforeDeleteHook:
		stockPriceBeforeDeleteHooks = append(stockPriceBeforeDeleteHooks, stockPriceHook)
	case boil.AfterDeleteHook:
		stockPriceAfterDeleteHooks = append(stockPriceAfterDeleteHooks, stockPriceHook)
	case boil.BeforeUpsertHook:
		stockPriceBeforeUpsertHooks = append(stockPriceBeforeUpsertHooks, stockPriceHook)
	case boil.AfterUpsertHook:
		stockPriceAfterUpsertHooks = append(stockPriceAfterUpsertHooks, stockPriceHook)
	}
}

// One returns a single stockPrice record from the query.
func (q stockPriceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StockPrice, error) {
	o := &StockPrice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, cerrors.Wrap(cerrors.ErrNotFound, "dao: stock_prices not found")
		}
		return nil, errors.Wrap(err, "dao: failed to execute a one query for stock_prices")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StockPrice records from the query.
func (q stockPriceQuery) All(ctx context.Context, exec boil.ContextExecutor) (StockPriceSlice, error) {
	var o []*StockPrice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dao: failed to assign all query results to StockPrice slice")
	}

	if len(stockPriceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StockPrice records in the query.
func (q stockPriceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to count stock_prices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stockPriceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dao: failed to check if stock_prices exists")
	}

	return count > 0, nil
}

// StockPrices retrieves all the records using an executor.
func StockPrices(mods ...qm.QueryMod) stockPriceQuery {
	mods = append(mods, qm.From("`stock_prices`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`stock_prices`.*"})
	}

	return stockPriceQuery{q}
}

// FindStockPrice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStockPrice(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*StockPrice, error) {
	stockPriceObj := &StockPrice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `stock_prices` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, stockPriceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, cerrors.Wrap(cerrors.ErrNotFound, "dao: stock_prices not found")
		}
		return nil, errors.Wrap(err, "dao: unable to select from stock_prices")
	}

	if err = stockPriceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return stockPriceObj, err
	}

	return stockPriceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StockPrice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dao: no stock_prices provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stockPriceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stockPriceInsertCacheMut.RLock()
	cache, cached := stockPriceInsertCache[key]
	stockPriceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stockPriceAllColumns,
			stockPriceColumnsWithDefault,
			stockPriceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stockPriceType, stockPriceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stockPriceType, stockPriceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `stock_prices` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `stock_prices` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `stock_prices` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, stockPricePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dao: unable to insert into stock_prices")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dao: unable to populate default values for stock_prices")
	}

CacheNoHooks:
	if !cached {
		stockPriceInsertCacheMut.Lock()
		stockPriceInsertCache[key] = cache
		stockPriceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StockPrice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StockPrice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	stockPriceUpdateCacheMut.RLock()
	cache, cached := stockPriceUpdateCache[key]
	stockPriceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stockPriceAllColumns,
			stockPricePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dao: unable to update stock_prices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `stock_prices` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, stockPricePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stockPriceType, stockPriceMapping, append(wl, stockPricePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update stock_prices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by update for stock_prices")
	}

	if !cached {
		stockPriceUpdateCacheMut.Lock()
		stockPriceUpdateCache[key] = cache
		stockPriceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q stockPriceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all for stock_prices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected for stock_prices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StockPriceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dao: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockPricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `stock_prices` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, stockPricePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all in stockPrice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected all in update all stockPrice")
	}
	return rowsAff, nil
}

var mySQLStockPriceUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StockPrice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dao: no stock_prices provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stockPriceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLStockPriceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stockPriceUpsertCacheMut.RLock()
	cache, cached := stockPriceUpsertCache[key]
	stockPriceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			stockPriceAllColumns,
			stockPriceColumnsWithDefault,
			stockPriceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			stockPriceAllColumns,
			stockPricePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dao: unable to upsert stock_prices, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`stock_prices`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `stock_prices` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(stockPriceType, stockPriceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stockPriceType, stockPriceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dao: unable to upsert for stock_prices")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(stockPriceType, stockPriceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dao: unable to retrieve unique values for stock_prices")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dao: unable to populate default values for stock_prices")
	}

CacheNoHooks:
	if !cached {
		stockPriceUpsertCacheMut.Lock()
		stockPriceUpsertCache[key] = cache
		stockPriceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StockPrice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StockPrice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dao: no StockPrice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stockPricePrimaryKeyMapping)
	sql := "DELETE FROM `stock_prices` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete from stock_prices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by delete for stock_prices")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stockPriceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dao: no stockPriceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from stock_prices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for stock_prices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StockPriceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(stockPriceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockPricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `stock_prices` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, stockPricePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from stockPrice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for stock_prices")
	}

	if len(stockPriceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StockPrice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStockPrice(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StockPriceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StockPriceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockPricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `stock_prices`.* FROM `stock_prices` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, stockPricePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dao: unable to reload all in StockPriceSlice")
	}

	*o = slice

	return nil
}

// StockPriceExists checks if the StockPrice row exists.
func StockPriceExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `stock_prices` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dao: unable to check if stock_prices exists")
	}

	return exists, nil
}

// Exists checks if the StockPrice row exists.
func (o *StockPrice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StockPriceExists(ctx, exec, o.ID)
}
