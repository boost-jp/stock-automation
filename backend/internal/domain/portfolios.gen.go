// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/drivers"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	models "github.com/boost-jp/stock-automation/internal/domain"
	cerrors "github.com/boost-jp/stock-automation/internal/errors"
	errors "github.com/boost-jp/stock-automation/internal/errors/boilerrors"
)

//go:generate go run  ../../../cmd/generator/repoinit --fields=ID,Code,Name,Shares,PurchasePrice,PurchaseDate,CreatedAt,UpdatedAt, Portfolio

// You can edit this as you like.

// Portfolio is an object representing the database table.
// Set the "validate" tags as needed.
// https://pkg.go.dev/gopkg.in/go-playground/validator.v10
type Portfolio struct {
	ID            string        `validate:""`
	Code          string        `validate:""` // 銘柄コード
	Name          string        `validate:""` // 銘柄名
	Shares        int           `validate:""` // 保有株数
	PurchasePrice types.Decimal `validate:""` // 購入価格
	PurchaseDate  time.Time     `validate:""` // 購入日
	CreatedAt     null.Time     `validate:""` // 作成日時
	UpdatedAt     null.Time     `validate:""` // 更新日時
}

func (m *Portfolio) valid() error {
	return validate.Struct(m)
}

func NewPortfolio(
	ID string,
	Code string,
	Name string,
	Shares int,
	PurchasePrice types.Decimal,
	PurchaseDate time.Time,
	CreatedAt null.Time,
	UpdatedAt null.Time,
) (*Portfolio, error) {
	do := &Portfolio{
		ID:            ID,
		Code:          Code,
		Name:          Name,
		Shares:        Shares,
		PurchasePrice: PurchasePrice,
		PurchaseDate:  PurchaseDate,
		CreatedAt:     CreatedAt,
		UpdatedAt:     UpdatedAt,
	}
	if err := do.valid(); err != nil {
		return nil, err
	}
	return do, nil
}
