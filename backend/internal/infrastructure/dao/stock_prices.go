package dao

import (
	"context"
	"time"
)

// StockPrice represents a row from the stock_prices table
type StockPrice struct {
	ID         string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Code       string    `boil:"code" json:"code" toml:"code" yaml:"code"`
	Date       time.Time `boil:"date" json:"date" toml:"date" yaml:"date"`
	OpenPrice  float64   `boil:"open_price" json:"open_price" toml:"open_price" yaml:"open_price"`
	HighPrice  float64   `boil:"high_price" json:"high_price" toml:"high_price" yaml:"high_price"`
	LowPrice   float64   `boil:"low_price" json:"low_price" toml:"low_price" yaml:"low_price"`
	ClosePrice float64   `boil:"close_price" json:"close_price" toml:"close_price" yaml:"close_price"`
	Volume     int64     `boil:"volume" json:"volume" toml:"volume" yaml:"volume"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
}

// StockPriceColumns contains column names for stock_prices table
var StockPriceColumns = struct {
	ID         string
	Code       string
	Date       string
	OpenPrice  string
	HighPrice  string
	LowPrice   string
	ClosePrice string
	Volume     string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	Code:       "code",
	Date:       "date",
	OpenPrice:  "open_price",
	HighPrice:  "high_price",
	LowPrice:   "low_price",
	ClosePrice: "close_price",
	Volume:     "volume",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

// Insert inserts a single StockPrice record
func (o *StockPrice) Insert(ctx context.Context) error {
	// Implementation would be generated by SQLBoiler
	return nil
}

// Update updates a single StockPrice record
func (o *StockPrice) Update(ctx context.Context) error {
	// Implementation would be generated by SQLBoiler
	return nil
}

// Delete deletes a single StockPrice record
func (o *StockPrice) Delete(ctx context.Context) error {
	// Implementation would be generated by SQLBoiler
	return nil
}

// FindStockPrice retrieves a single record by ID
func FindStockPrice(ctx context.Context, id string) (*StockPrice, error) {
	// Implementation would be generated by SQLBoiler
	return nil, nil
}

// AllStockPrices retrieves all records
func AllStockPrices(ctx context.Context) ([]*StockPrice, error) {
	// Implementation would be generated by SQLBoiler
	return nil, nil
}