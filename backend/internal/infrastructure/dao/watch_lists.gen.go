// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dao

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/drivers"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	models "github.com/boost-jp/stock-automation/internal/domain"
	cerrors "github.com/boost-jp/stock-automation/internal/errors"
	errors "github.com/boost-jp/stock-automation/internal/errors/boilerrors"
)

// InsertAll inserts all rows with the specified column values, using an executor.
func (o WatchListSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}
	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())

			if queries.MustTime(row.CreatedAt).IsZero() {
				queries.SetScanner(&row.CreatedAt, currTime)
			}
			if queries.MustTime(row.UpdatedAt).IsZero() {
				queries.SetScanner(&row.UpdatedAt, currTime)
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return err
		}

		nzDefaults := queries.NonZeroDefaultSet(watchListColumnsWithDefault, row)
		wl, _ := columns.InsertColumnSet(
			watchListAllColumns,
			watchListColumnsWithDefault,
			watchListColumnsWithoutDefault,
			nzDefaults,
		)
		if i == 0 {
			sql = "INSERT INTO `watch_lists` " + "(`" + strings.Join(wl, "`,`") + "`)" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(watchListType, watchListMapping, wl)
		if err != nil {
			return err
		}
		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, vals...)
	}

	_, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		var mysqlErr *mysql.MySQLError
		if errors.As(err, &mysqlErr) && mysqlErr.Number == 1062 {
			return cerrors.Wrap(cerrors.ErrAlreadyExists, "dao: unable to insert into watch_lists")
		}
		return errors.Wrap(err, "dao: unable to insert into watch_lists")
	}

	return nil
}

func (WatchList) GetColumns() []string {
	return watchListAllColumns
}

func (WatchList) GetPKs() []string {
	return watchListPrimaryKeyColumns
}

func (watchListQuery) GetColumns() []string {
	return watchListAllColumns
}

func (watchListQuery) GetPKs() []string {
	return watchListPrimaryKeyColumns
} // WatchList is an object representing the database table.
type WatchList struct {
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`
	// 銘柄コード
	Code string `boil:"code" json:"code" toml:"code" yaml:"code"`
	// 銘柄名
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`
	// 目標買い価格
	TargetBuyPrice types.NullDecimal `boil:"target_buy_price" json:"target_buy_price,omitempty" toml:"target_buy_price" yaml:"target_buy_price,omitempty"`
	// 目標売り価格
	TargetSellPrice types.NullDecimal `boil:"target_sell_price" json:"target_sell_price,omitempty" toml:"target_sell_price" yaml:"target_sell_price,omitempty"`
	// アクティブフラグ
	IsActive null.Bool `boil:"is_active" json:"is_active,omitempty" toml:"is_active" yaml:"is_active,omitempty"`
	// 作成日時
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	// 更新日時
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *watchListR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L watchListL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WatchListColumns = struct {
	ID              string
	Code            string
	Name            string
	TargetBuyPrice  string
	TargetSellPrice string
	IsActive        string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "id",
	Code:            "code",
	Name:            "name",
	TargetBuyPrice:  "target_buy_price",
	TargetSellPrice: "target_sell_price",
	IsActive:        "is_active",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

var WatchListTableColumns = struct {
	ID              string
	Code            string
	Name            string
	TargetBuyPrice  string
	TargetSellPrice string
	IsActive        string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "watch_lists.id",
	Code:            "watch_lists.code",
	Name:            "watch_lists.name",
	TargetBuyPrice:  "watch_lists.target_buy_price",
	TargetSellPrice: "watch_lists.target_sell_price",
	IsActive:        "watch_lists.is_active",
	CreatedAt:       "watch_lists.created_at",
	UpdatedAt:       "watch_lists.updated_at",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var WatchListWhere = struct {
	ID              whereHelperstring
	Code            whereHelperstring
	Name            whereHelperstring
	TargetBuyPrice  whereHelpertypes_NullDecimal
	TargetSellPrice whereHelpertypes_NullDecimal
	IsActive        whereHelpernull_Bool
	CreatedAt       whereHelpernull_Time
	UpdatedAt       whereHelpernull_Time
}{
	ID:              whereHelperstring{field: "`watch_lists`.`id`"},
	Code:            whereHelperstring{field: "`watch_lists`.`code`"},
	Name:            whereHelperstring{field: "`watch_lists`.`name`"},
	TargetBuyPrice:  whereHelpertypes_NullDecimal{field: "`watch_lists`.`target_buy_price`"},
	TargetSellPrice: whereHelpertypes_NullDecimal{field: "`watch_lists`.`target_sell_price`"},
	IsActive:        whereHelpernull_Bool{field: "`watch_lists`.`is_active`"},
	CreatedAt:       whereHelpernull_Time{field: "`watch_lists`.`created_at`"},
	UpdatedAt:       whereHelpernull_Time{field: "`watch_lists`.`updated_at`"},
}

// WatchListRels is where relationship names are stored.
var WatchListRels = struct {
}{}

// watchListR is where relationships are stored.
type watchListR struct {
}

// NewStruct creates a new relationship struct
func (*watchListR) NewStruct() *watchListR {
	return &watchListR{}
}

// watchListL is where Load methods for each relationship are stored.
type watchListL struct{}

var (
	watchListAllColumns            = []string{"id", "code", "name", "target_buy_price", "target_sell_price", "is_active", "created_at", "updated_at"}
	watchListColumnsWithoutDefault = []string{"id", "code", "name", "target_buy_price", "target_sell_price"}
	watchListColumnsWithDefault    = []string{"is_active", "created_at", "updated_at"}
	watchListPrimaryKeyColumns     = []string{"id"}
	watchListGeneratedColumns      = []string{}
)

type (
	// WatchListSlice is an alias for a slice of pointers to WatchList.
	// This should almost always be used instead of []WatchList.
	WatchListSlice []*WatchList
	// WatchListHook is the signature for custom WatchList hook methods
	WatchListHook func(context.Context, boil.ContextExecutor, *WatchList) error

	watchListQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	watchListType                 = reflect.TypeOf(&WatchList{})
	watchListMapping              = queries.MakeStructMapping(watchListType)
	watchListPrimaryKeyMapping, _ = queries.BindMapping(watchListType, watchListMapping, watchListPrimaryKeyColumns)
	watchListInsertCacheMut       sync.RWMutex
	watchListInsertCache          = make(map[string]insertCache)
	watchListUpdateCacheMut       sync.RWMutex
	watchListUpdateCache          = make(map[string]updateCache)
	watchListUpsertCacheMut       sync.RWMutex
	watchListUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var watchListAfterSelectHooks []WatchListHook

var watchListBeforeInsertHooks []WatchListHook
var watchListAfterInsertHooks []WatchListHook

var watchListBeforeUpdateHooks []WatchListHook
var watchListAfterUpdateHooks []WatchListHook

var watchListBeforeDeleteHooks []WatchListHook
var watchListAfterDeleteHooks []WatchListHook

var watchListBeforeUpsertHooks []WatchListHook
var watchListAfterUpsertHooks []WatchListHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WatchList) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range watchListAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WatchList) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range watchListBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WatchList) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range watchListAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WatchList) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range watchListBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WatchList) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range watchListAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WatchList) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range watchListBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WatchList) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range watchListAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WatchList) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range watchListBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WatchList) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range watchListAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWatchListHook registers your hook function for all future operations.
func AddWatchListHook(hookPoint boil.HookPoint, watchListHook WatchListHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		watchListAfterSelectHooks = append(watchListAfterSelectHooks, watchListHook)
	case boil.BeforeInsertHook:
		watchListBeforeInsertHooks = append(watchListBeforeInsertHooks, watchListHook)
	case boil.AfterInsertHook:
		watchListAfterInsertHooks = append(watchListAfterInsertHooks, watchListHook)
	case boil.BeforeUpdateHook:
		watchListBeforeUpdateHooks = append(watchListBeforeUpdateHooks, watchListHook)
	case boil.AfterUpdateHook:
		watchListAfterUpdateHooks = append(watchListAfterUpdateHooks, watchListHook)
	case boil.BeforeDeleteHook:
		watchListBeforeDeleteHooks = append(watchListBeforeDeleteHooks, watchListHook)
	case boil.AfterDeleteHook:
		watchListAfterDeleteHooks = append(watchListAfterDeleteHooks, watchListHook)
	case boil.BeforeUpsertHook:
		watchListBeforeUpsertHooks = append(watchListBeforeUpsertHooks, watchListHook)
	case boil.AfterUpsertHook:
		watchListAfterUpsertHooks = append(watchListAfterUpsertHooks, watchListHook)
	}
}

// One returns a single watchList record from the query.
func (q watchListQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WatchList, error) {
	o := &WatchList{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, cerrors.Wrap(cerrors.ErrNotFound, "dao: watch_lists not found")
		}
		return nil, errors.Wrap(err, "dao: failed to execute a one query for watch_lists")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WatchList records from the query.
func (q watchListQuery) All(ctx context.Context, exec boil.ContextExecutor) (WatchListSlice, error) {
	var o []*WatchList

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dao: failed to assign all query results to WatchList slice")
	}

	if len(watchListAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WatchList records in the query.
func (q watchListQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to count watch_lists rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q watchListQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dao: failed to check if watch_lists exists")
	}

	return count > 0, nil
}

// WatchLists retrieves all the records using an executor.
func WatchLists(mods ...qm.QueryMod) watchListQuery {
	mods = append(mods, qm.From("`watch_lists`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`watch_lists`.*"})
	}

	return watchListQuery{q}
}

// FindWatchList retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWatchList(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*WatchList, error) {
	watchListObj := &WatchList{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `watch_lists` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, watchListObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, cerrors.Wrap(cerrors.ErrNotFound, "dao: watch_lists not found")
		}
		return nil, errors.Wrap(err, "dao: unable to select from watch_lists")
	}

	if err = watchListObj.doAfterSelectHooks(ctx, exec); err != nil {
		return watchListObj, err
	}

	return watchListObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WatchList) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dao: no watch_lists provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(watchListColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	watchListInsertCacheMut.RLock()
	cache, cached := watchListInsertCache[key]
	watchListInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			watchListAllColumns,
			watchListColumnsWithDefault,
			watchListColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(watchListType, watchListMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(watchListType, watchListMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `watch_lists` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `watch_lists` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `watch_lists` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, watchListPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dao: unable to insert into watch_lists")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dao: unable to populate default values for watch_lists")
	}

CacheNoHooks:
	if !cached {
		watchListInsertCacheMut.Lock()
		watchListInsertCache[key] = cache
		watchListInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the WatchList.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WatchList) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	watchListUpdateCacheMut.RLock()
	cache, cached := watchListUpdateCache[key]
	watchListUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			watchListAllColumns,
			watchListPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dao: unable to update watch_lists, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `watch_lists` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, watchListPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(watchListType, watchListMapping, append(wl, watchListPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update watch_lists row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by update for watch_lists")
	}

	if !cached {
		watchListUpdateCacheMut.Lock()
		watchListUpdateCache[key] = cache
		watchListUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q watchListQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all for watch_lists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected for watch_lists")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WatchListSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dao: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), watchListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `watch_lists` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, watchListPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all in watchList slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected all in update all watchList")
	}
	return rowsAff, nil
}

var mySQLWatchListUniqueColumns = []string{
	"id",
	"code",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WatchList) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dao: no watch_lists provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(watchListColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLWatchListUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	watchListUpsertCacheMut.RLock()
	cache, cached := watchListUpsertCache[key]
	watchListUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			watchListAllColumns,
			watchListColumnsWithDefault,
			watchListColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			watchListAllColumns,
			watchListPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dao: unable to upsert watch_lists, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`watch_lists`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `watch_lists` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(watchListType, watchListMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(watchListType, watchListMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dao: unable to upsert for watch_lists")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(watchListType, watchListMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dao: unable to retrieve unique values for watch_lists")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dao: unable to populate default values for watch_lists")
	}

CacheNoHooks:
	if !cached {
		watchListUpsertCacheMut.Lock()
		watchListUpsertCache[key] = cache
		watchListUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single WatchList record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WatchList) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dao: no WatchList provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), watchListPrimaryKeyMapping)
	sql := "DELETE FROM `watch_lists` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete from watch_lists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by delete for watch_lists")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q watchListQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dao: no watchListQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from watch_lists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for watch_lists")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WatchListSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(watchListBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), watchListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `watch_lists` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, watchListPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from watchList slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for watch_lists")
	}

	if len(watchListAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WatchList) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWatchList(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WatchListSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WatchListSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), watchListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `watch_lists`.* FROM `watch_lists` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, watchListPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dao: unable to reload all in WatchListSlice")
	}

	*o = slice

	return nil
}

// WatchListExists checks if the WatchList row exists.
func WatchListExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `watch_lists` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dao: unable to check if watch_lists exists")
	}

	return exists, nil
}

// Exists checks if the WatchList row exists.
func (o *WatchList) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WatchListExists(ctx, exec, o.ID)
}
